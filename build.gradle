plugins {
    id 'org.asciidoctor.convert' version '1.5.3'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'java'
    id 'war'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.github.shk0da'
version = '0.1b'
description = 'Bioritmic'
sourceCompatibility = '1.8'

war {
//    exec {
//        commandLine 'cmd', '/c', 'yarn build'
//    }
    manifest {
        attributes 'Implementation-Title': project.description
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor': "com.github.shk0da"
        attributes 'Built-By': System.getProperty('user.name')
        attributes 'Build-Time': new Date().format("dd.MM.yyyy HH:mm")
        attributes 'Build-Jdk': System.getProperty('java.version')
        attributes 'Created-By': "Gradle ${gradle.gradleVersion}"
        writeTo "${buildDir}/www/WEB-INF/MANIFEST.MF"
    }

    webAppDirName = file("${buildDir}/www")
}


repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', 'Greenwich.SR1')
    snippetsDir = file('build/generated-snippets')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.springframework.cloud:spring-cloud-config-server'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-security'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework.security:spring-security-jwt:1.0.10.RELEASE'
    implementation 'org.springframework.session:spring-session:1.3.5.RELEASE'

    implementation 'org.apache.ignite:ignite-spring:2.7.0'
    implementation 'org.apache.ignite:ignite-core:2.7.0'
    implementation 'org.apache.ignite:ignite-geospatial:1+'
    implementation 'org.apache.ignite:ignite-indexing:2.7.0'
    implementation 'org.apache.ignite:ignite-slf4j:2.7.0'

    implementation 'org.postgresql:postgresql:42.2.5'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.liquibase:liquibase-core'

    compile('io.jsonwebtoken:jjwt:0.9.1')
    compile('io.swagger:swagger-models:1.5.20')
    compile('io.springfox:springfox-core:2.9.2')
    compile('io.springfox:springfox-schema:2.9.2')
    compile('io.springfox:springfox-spi:2.9.2')
    compile('io.springfox:springfox-swagger-common:2.9.2')
    compile('io.springfox:springfox-spring-web:2.9.2')
    compile('io.springfox:springfox-swagger-ui:2.9.2')
    compile('io.springfox:springfox-swagger2:2.9.2')
    compile('io.springfox:springfox-bean-validators:2.9.2')

    compile('net.logstash.logback:logstash-logback-encoder:5.1')

    compile('io.micrometer:micrometer-core')
    compile('com.ryantenney.metrics:metrics-spring:3.1.3')
    compile('io.dropwizard.metrics:metrics-core')
    compile('io.dropwizard.metrics:metrics-annotation')
    compile('io.dropwizard.metrics:metrics-json')
    compile('io.dropwizard.metrics:metrics-jvm')
    compile('io.dropwizard.metrics:metrics-jmx')
    compile('io.dropwizard.metrics:metrics-servlet')
    compile('io.dropwizard.metrics:metrics-servlets')

    compile('com.fasterxml.jackson.datatype:jackson-datatype-hppc')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-json-org')

    implementation 'org.projectlombok:lombok:1.18.6'
    implementation 'org.apache.commons:commons-lang3:3.8.1'

    runtime 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}
