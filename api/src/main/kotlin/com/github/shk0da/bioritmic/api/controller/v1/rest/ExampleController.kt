package com.github.shk0da.bioritmic.api.controller.v1.rest

import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.Location

/**

  1. Регистрация пользователя c подтверждением по мейл в течении кастомного вло-ва часов часов / авторизация Bearer + Oauth2
   - фейсбук
   - google
   - восстановление пароля, с подчисткой всех других авторизаций
   - множественная авторизация с разных устройств
  2. Личный кабинет с данными и настройками
   - фото(автоматический кроп), дата рождения, возможно краткая информация о себе
   - радиус поиска
   - днд время
   - набор ритмов (опции отвязанные по смыслу) по которым искать с описаниями
   - доп. настройки по полу, возрасту, ?типу поиска?
   - выбор типа уведомлений: пуш, звук, вибрация
   - один аккаунт на многих устройствах с разными настройками / + синхронизировать настройка на все клиенты
   - привязать фейсбук / показывать соцсеть или нет
  3. Сохранение геопозиции (хранение трека за кастомный промежуток времени)
  4. Поиск в радиусе других пользователей и сравнение ритмов (компонент на с++)
   - возможно gRPC
  5. Хранение данных в кассандре
   - консул (етс) для хранения настроек
  6. Кластеризация и масштабирование
  7. Логгирование в логстеш + сбор метрик в локальную графану
  8. Чарты для мини-кубика

  9. Фронтальная часть на реакт, с возможностями как на мобильной версии
   - локальные настройки частоты отправки координат (точн0сть поиска)
   - пуши веб, айос, андроид
 10. Роутинг до бекенда с балансировкой (мб ха-прокси или зуул и тд)

 11. Отправить привет, подмигивание, открытку, эмоджи и тд (у каждого пользака есть свой почтоый ящик)
 12. Запомнить человека, написать сообщение
 13. Раздел контактов/перчесечений с датой фото, просмотром почтового ящика.

 14. Отображение статистики по пользователям на главном экране

* */
@KtorExperimentalLocationsAPI
class ExampleController {

    @Location("/location/{name}")
    class MyLocation(val name: String, val arg1: Int = 42, val arg2: String = "default")

    @Location("/type/{name}")
    data class Type(val name: String) {
        @Location("/edit")
        data class Edit(val type: Type)

        @Location("/list/{page}")
        data class List(val type: Type, val page: Int)
    }
}
